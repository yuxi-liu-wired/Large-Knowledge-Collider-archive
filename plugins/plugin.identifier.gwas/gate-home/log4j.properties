# Log entries on console and into a file.
log4j.rootLogger=INFO, stdout

# Console appender that outputs messages of INFO level or higher to stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Threshold=DEBUG
log4j.appender.stdout.Follow=true
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# we print message type, message and new line.
# The message itself would have information such as
# benchmark ID, code for CheckPoint or ProcessFinished, time stamp, and any features
# provided within the message
log4j.appender.stdout.layout.ConversionPattern=%d{dd HH:mm:ss} %-5.5p %c{5}%n  [%t]: %m%n

# Don't log benchmark events
log4j.logger.gate.util.Benchmark=off
log4j.additivity.gate.util.Benchmark=false

###############################################################################
# Logger configs - most classes stay at INFO level by default so the
# log isn't flooded.  Add on individual classes or packages as needed.
###############################################################################
log4j.logger.gate=INFO
log4j.logger.gatetutorial=DEBUG
#log4j.logger.gate.creole.SerialController=DEBUG
#log4j.logger.gate.util.profile.Profiler=DEBUG

# For reference - here are the primary options for the PatternLayout
# %c category name; {n} only uses rightmost n components
# %C fully qualified class. SLOW!
# %d date
# %F file. SLOW!
# %l JVM specific location info. SLOW!
# %L line number. SLOW!
# %p priority
# %m message
# %M method name. SLOW!
# %n newline
# %p priority
# %r program's running time in milliseconds
# %t thread
# %x nested diagnostic context
# %-20.30m will output the message right-padded to 20 spaces, truncated to a max of 30.
